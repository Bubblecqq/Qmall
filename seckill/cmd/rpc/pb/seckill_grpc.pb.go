// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: seckill.proto

//import "product/cmd/rpc/product/pb/product.proto";

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecKill_IncreaseSecKillOrder_FullMethodName           = "/pb.secKill/IncreaseSecKillOrder"
	SecKill_IncreaseSecKillProducts_FullMethodName        = "/pb.secKill/IncreaseSecKillProducts"
	SecKill_IncreaseSecKillQuota_FullMethodName           = "/pb.secKill/IncreaseSecKillQuota"
	SecKill_IncreaseSecKillUserQuota_FullMethodName       = "/pb.secKill/IncreaseSecKillUserQuota"
	SecKill_IncreaseSecKillStock_FullMethodName           = "/pb.secKill/IncreaseSecKillStock"
	SecKill_IncreaseSecKillRecord_FullMethodName          = "/pb.secKill/IncreaseSecKillRecord"
	SecKill_GetSecKillQuotaByProductsId_FullMethodName    = "/pb.secKill/GetSecKillQuotaByProductsId"
	SecKill_GetSecKillQuotaByProductsNum_FullMethodName   = "/pb.secKill/GetSecKillQuotaByProductsNum"
	SecKill_GetSecKillProductsByProductsId_FullMethodName = "/pb.secKill/GetSecKillProductsByProductsId"
	SecKill_GetSecKillUserQuota_FullMethodName            = "/pb.secKill/GetSecKillUserQuota"
	SecKill_UpdateSecKillQuotaById_FullMethodName         = "/pb.secKill/UpdateSecKillQuotaById"
	SecKill_UpdateSecKillUserQuotaById_FullMethodName     = "/pb.secKill/UpdateSecKillUserQuotaById"
	SecKill_SaveSecKillUserQuota_FullMethodName           = "/pb.secKill/SaveSecKillUserQuota"
	SecKill_SaveSecKillStock_FullMethodName               = "/pb.secKill/SaveSecKillStock"
	SecKill_SaveSecKillQuota_FullMethodName               = "/pb.secKill/SaveSecKillQuota"
	SecKill_GetDecreaseQuantity_FullMethodName            = "/pb.secKill/GetDecreaseQuantity"
	SecKill_CheckAndDeductQuotaAndStock_FullMethodName    = "/pb.secKill/CheckAndDeductQuotaAndStock"
)

// SecKillClient is the client API for SecKill service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecKillClient interface {
	IncreaseSecKillOrder(ctx context.Context, in *IncreaseSecKillOrderReq, opts ...grpc.CallOption) (*IncreaseSecKillOrderResp, error)
	IncreaseSecKillProducts(ctx context.Context, in *IncreaseSecKillProductsReq, opts ...grpc.CallOption) (*IncreaseSecKillProductsResp, error)
	IncreaseSecKillQuota(ctx context.Context, in *IncreaseSecKillQuotaReq, opts ...grpc.CallOption) (*IncreaseSecKillQuotaResp, error)
	IncreaseSecKillUserQuota(ctx context.Context, in *IncreaseSecKillUserQuotaReq, opts ...grpc.CallOption) (*IncreaseSecKillUserQuotaResp, error)
	IncreaseSecKillStock(ctx context.Context, in *IncreaseSecKillStockReq, opts ...grpc.CallOption) (*IncreaseSecKillStockResp, error)
	IncreaseSecKillRecord(ctx context.Context, in *IncreaseSecKillRecordReq, opts ...grpc.CallOption) (*IncreaseSecKillRecordResp, error)
	GetSecKillQuotaByProductsId(ctx context.Context, in *GetSecKillQuotaByProductsIdReq, opts ...grpc.CallOption) (*GetSecKillQuotaByProductsIdResp, error)
	GetSecKillQuotaByProductsNum(ctx context.Context, in *GetSecKillQuotaByProductsIdReq, opts ...grpc.CallOption) (*GetSecKillQuotaByProductsIdResp, error)
	GetSecKillProductsByProductsId(ctx context.Context, in *GetSecKillProductsByProductsIdReq, opts ...grpc.CallOption) (*GetSecKillProductsByProductsIdResp, error)
	GetSecKillUserQuota(ctx context.Context, in *GetSecKillUserQuotaReq, opts ...grpc.CallOption) (*GetSecKillUserQuotaResp, error)
	// 更新接口
	UpdateSecKillQuotaById(ctx context.Context, in *UpdateSecKillQuotaByIdReq, opts ...grpc.CallOption) (*UpdateSecKillQuotaByIdResp, error)
	UpdateSecKillUserQuotaById(ctx context.Context, in *UpdateSecKillUserQuotaByIdReq, opts ...grpc.CallOption) (*UpdateSecKillUserQuotaByIdResp, error)
	SaveSecKillUserQuota(ctx context.Context, in *SaveSecKillUserQuotaReq, opts ...grpc.CallOption) (*SaveSecKillUserQuotaResp, error)
	SaveSecKillStock(ctx context.Context, in *SaveSecKillStockReq, opts ...grpc.CallOption) (*SaveSecKillStockResp, error)
	SaveSecKillQuota(ctx context.Context, in *SaveSecKillQuotaReq, opts ...grpc.CallOption) (*SaveSecKillQuotaResp, error)
	GetDecreaseQuantity(ctx context.Context, in *GetDecreaseQuantityReq, opts ...grpc.CallOption) (*GetDecreaseQuantityResp, error)
	CheckAndDeductQuotaAndStock(ctx context.Context, in *CheckAndDeductQuotaAndStockReq, opts ...grpc.CallOption) (*CheckAndDeductQuotaAndStockResp, error)
}

type secKillClient struct {
	cc grpc.ClientConnInterface
}

func NewSecKillClient(cc grpc.ClientConnInterface) SecKillClient {
	return &secKillClient{cc}
}

func (c *secKillClient) IncreaseSecKillOrder(ctx context.Context, in *IncreaseSecKillOrderReq, opts ...grpc.CallOption) (*IncreaseSecKillOrderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncreaseSecKillOrderResp)
	err := c.cc.Invoke(ctx, SecKill_IncreaseSecKillOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) IncreaseSecKillProducts(ctx context.Context, in *IncreaseSecKillProductsReq, opts ...grpc.CallOption) (*IncreaseSecKillProductsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncreaseSecKillProductsResp)
	err := c.cc.Invoke(ctx, SecKill_IncreaseSecKillProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) IncreaseSecKillQuota(ctx context.Context, in *IncreaseSecKillQuotaReq, opts ...grpc.CallOption) (*IncreaseSecKillQuotaResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncreaseSecKillQuotaResp)
	err := c.cc.Invoke(ctx, SecKill_IncreaseSecKillQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) IncreaseSecKillUserQuota(ctx context.Context, in *IncreaseSecKillUserQuotaReq, opts ...grpc.CallOption) (*IncreaseSecKillUserQuotaResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncreaseSecKillUserQuotaResp)
	err := c.cc.Invoke(ctx, SecKill_IncreaseSecKillUserQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) IncreaseSecKillStock(ctx context.Context, in *IncreaseSecKillStockReq, opts ...grpc.CallOption) (*IncreaseSecKillStockResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncreaseSecKillStockResp)
	err := c.cc.Invoke(ctx, SecKill_IncreaseSecKillStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) IncreaseSecKillRecord(ctx context.Context, in *IncreaseSecKillRecordReq, opts ...grpc.CallOption) (*IncreaseSecKillRecordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncreaseSecKillRecordResp)
	err := c.cc.Invoke(ctx, SecKill_IncreaseSecKillRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) GetSecKillQuotaByProductsId(ctx context.Context, in *GetSecKillQuotaByProductsIdReq, opts ...grpc.CallOption) (*GetSecKillQuotaByProductsIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecKillQuotaByProductsIdResp)
	err := c.cc.Invoke(ctx, SecKill_GetSecKillQuotaByProductsId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) GetSecKillQuotaByProductsNum(ctx context.Context, in *GetSecKillQuotaByProductsIdReq, opts ...grpc.CallOption) (*GetSecKillQuotaByProductsIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecKillQuotaByProductsIdResp)
	err := c.cc.Invoke(ctx, SecKill_GetSecKillQuotaByProductsNum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) GetSecKillProductsByProductsId(ctx context.Context, in *GetSecKillProductsByProductsIdReq, opts ...grpc.CallOption) (*GetSecKillProductsByProductsIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecKillProductsByProductsIdResp)
	err := c.cc.Invoke(ctx, SecKill_GetSecKillProductsByProductsId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) GetSecKillUserQuota(ctx context.Context, in *GetSecKillUserQuotaReq, opts ...grpc.CallOption) (*GetSecKillUserQuotaResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecKillUserQuotaResp)
	err := c.cc.Invoke(ctx, SecKill_GetSecKillUserQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) UpdateSecKillQuotaById(ctx context.Context, in *UpdateSecKillQuotaByIdReq, opts ...grpc.CallOption) (*UpdateSecKillQuotaByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSecKillQuotaByIdResp)
	err := c.cc.Invoke(ctx, SecKill_UpdateSecKillQuotaById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) UpdateSecKillUserQuotaById(ctx context.Context, in *UpdateSecKillUserQuotaByIdReq, opts ...grpc.CallOption) (*UpdateSecKillUserQuotaByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSecKillUserQuotaByIdResp)
	err := c.cc.Invoke(ctx, SecKill_UpdateSecKillUserQuotaById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) SaveSecKillUserQuota(ctx context.Context, in *SaveSecKillUserQuotaReq, opts ...grpc.CallOption) (*SaveSecKillUserQuotaResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveSecKillUserQuotaResp)
	err := c.cc.Invoke(ctx, SecKill_SaveSecKillUserQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) SaveSecKillStock(ctx context.Context, in *SaveSecKillStockReq, opts ...grpc.CallOption) (*SaveSecKillStockResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveSecKillStockResp)
	err := c.cc.Invoke(ctx, SecKill_SaveSecKillStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) SaveSecKillQuota(ctx context.Context, in *SaveSecKillQuotaReq, opts ...grpc.CallOption) (*SaveSecKillQuotaResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveSecKillQuotaResp)
	err := c.cc.Invoke(ctx, SecKill_SaveSecKillQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) GetDecreaseQuantity(ctx context.Context, in *GetDecreaseQuantityReq, opts ...grpc.CallOption) (*GetDecreaseQuantityResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDecreaseQuantityResp)
	err := c.cc.Invoke(ctx, SecKill_GetDecreaseQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) CheckAndDeductQuotaAndStock(ctx context.Context, in *CheckAndDeductQuotaAndStockReq, opts ...grpc.CallOption) (*CheckAndDeductQuotaAndStockResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAndDeductQuotaAndStockResp)
	err := c.cc.Invoke(ctx, SecKill_CheckAndDeductQuotaAndStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecKillServer is the server API for SecKill service.
// All implementations must embed UnimplementedSecKillServer
// for forward compatibility.
type SecKillServer interface {
	IncreaseSecKillOrder(context.Context, *IncreaseSecKillOrderReq) (*IncreaseSecKillOrderResp, error)
	IncreaseSecKillProducts(context.Context, *IncreaseSecKillProductsReq) (*IncreaseSecKillProductsResp, error)
	IncreaseSecKillQuota(context.Context, *IncreaseSecKillQuotaReq) (*IncreaseSecKillQuotaResp, error)
	IncreaseSecKillUserQuota(context.Context, *IncreaseSecKillUserQuotaReq) (*IncreaseSecKillUserQuotaResp, error)
	IncreaseSecKillStock(context.Context, *IncreaseSecKillStockReq) (*IncreaseSecKillStockResp, error)
	IncreaseSecKillRecord(context.Context, *IncreaseSecKillRecordReq) (*IncreaseSecKillRecordResp, error)
	GetSecKillQuotaByProductsId(context.Context, *GetSecKillQuotaByProductsIdReq) (*GetSecKillQuotaByProductsIdResp, error)
	GetSecKillQuotaByProductsNum(context.Context, *GetSecKillQuotaByProductsIdReq) (*GetSecKillQuotaByProductsIdResp, error)
	GetSecKillProductsByProductsId(context.Context, *GetSecKillProductsByProductsIdReq) (*GetSecKillProductsByProductsIdResp, error)
	GetSecKillUserQuota(context.Context, *GetSecKillUserQuotaReq) (*GetSecKillUserQuotaResp, error)
	// 更新接口
	UpdateSecKillQuotaById(context.Context, *UpdateSecKillQuotaByIdReq) (*UpdateSecKillQuotaByIdResp, error)
	UpdateSecKillUserQuotaById(context.Context, *UpdateSecKillUserQuotaByIdReq) (*UpdateSecKillUserQuotaByIdResp, error)
	SaveSecKillUserQuota(context.Context, *SaveSecKillUserQuotaReq) (*SaveSecKillUserQuotaResp, error)
	SaveSecKillStock(context.Context, *SaveSecKillStockReq) (*SaveSecKillStockResp, error)
	SaveSecKillQuota(context.Context, *SaveSecKillQuotaReq) (*SaveSecKillQuotaResp, error)
	GetDecreaseQuantity(context.Context, *GetDecreaseQuantityReq) (*GetDecreaseQuantityResp, error)
	CheckAndDeductQuotaAndStock(context.Context, *CheckAndDeductQuotaAndStockReq) (*CheckAndDeductQuotaAndStockResp, error)
	mustEmbedUnimplementedSecKillServer()
}

// UnimplementedSecKillServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecKillServer struct{}

func (UnimplementedSecKillServer) IncreaseSecKillOrder(context.Context, *IncreaseSecKillOrderReq) (*IncreaseSecKillOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseSecKillOrder not implemented")
}
func (UnimplementedSecKillServer) IncreaseSecKillProducts(context.Context, *IncreaseSecKillProductsReq) (*IncreaseSecKillProductsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseSecKillProducts not implemented")
}
func (UnimplementedSecKillServer) IncreaseSecKillQuota(context.Context, *IncreaseSecKillQuotaReq) (*IncreaseSecKillQuotaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseSecKillQuota not implemented")
}
func (UnimplementedSecKillServer) IncreaseSecKillUserQuota(context.Context, *IncreaseSecKillUserQuotaReq) (*IncreaseSecKillUserQuotaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseSecKillUserQuota not implemented")
}
func (UnimplementedSecKillServer) IncreaseSecKillStock(context.Context, *IncreaseSecKillStockReq) (*IncreaseSecKillStockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseSecKillStock not implemented")
}
func (UnimplementedSecKillServer) IncreaseSecKillRecord(context.Context, *IncreaseSecKillRecordReq) (*IncreaseSecKillRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseSecKillRecord not implemented")
}
func (UnimplementedSecKillServer) GetSecKillQuotaByProductsId(context.Context, *GetSecKillQuotaByProductsIdReq) (*GetSecKillQuotaByProductsIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecKillQuotaByProductsId not implemented")
}
func (UnimplementedSecKillServer) GetSecKillQuotaByProductsNum(context.Context, *GetSecKillQuotaByProductsIdReq) (*GetSecKillQuotaByProductsIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecKillQuotaByProductsNum not implemented")
}
func (UnimplementedSecKillServer) GetSecKillProductsByProductsId(context.Context, *GetSecKillProductsByProductsIdReq) (*GetSecKillProductsByProductsIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecKillProductsByProductsId not implemented")
}
func (UnimplementedSecKillServer) GetSecKillUserQuota(context.Context, *GetSecKillUserQuotaReq) (*GetSecKillUserQuotaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecKillUserQuota not implemented")
}
func (UnimplementedSecKillServer) UpdateSecKillQuotaById(context.Context, *UpdateSecKillQuotaByIdReq) (*UpdateSecKillQuotaByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecKillQuotaById not implemented")
}
func (UnimplementedSecKillServer) UpdateSecKillUserQuotaById(context.Context, *UpdateSecKillUserQuotaByIdReq) (*UpdateSecKillUserQuotaByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecKillUserQuotaById not implemented")
}
func (UnimplementedSecKillServer) SaveSecKillUserQuota(context.Context, *SaveSecKillUserQuotaReq) (*SaveSecKillUserQuotaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSecKillUserQuota not implemented")
}
func (UnimplementedSecKillServer) SaveSecKillStock(context.Context, *SaveSecKillStockReq) (*SaveSecKillStockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSecKillStock not implemented")
}
func (UnimplementedSecKillServer) SaveSecKillQuota(context.Context, *SaveSecKillQuotaReq) (*SaveSecKillQuotaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSecKillQuota not implemented")
}
func (UnimplementedSecKillServer) GetDecreaseQuantity(context.Context, *GetDecreaseQuantityReq) (*GetDecreaseQuantityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDecreaseQuantity not implemented")
}
func (UnimplementedSecKillServer) CheckAndDeductQuotaAndStock(context.Context, *CheckAndDeductQuotaAndStockReq) (*CheckAndDeductQuotaAndStockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAndDeductQuotaAndStock not implemented")
}
func (UnimplementedSecKillServer) mustEmbedUnimplementedSecKillServer() {}
func (UnimplementedSecKillServer) testEmbeddedByValue()                 {}

// UnsafeSecKillServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecKillServer will
// result in compilation errors.
type UnsafeSecKillServer interface {
	mustEmbedUnimplementedSecKillServer()
}

func RegisterSecKillServer(s grpc.ServiceRegistrar, srv SecKillServer) {
	// If the following call pancis, it indicates UnimplementedSecKillServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecKill_ServiceDesc, srv)
}

func _SecKill_IncreaseSecKillOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseSecKillOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).IncreaseSecKillOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_IncreaseSecKillOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).IncreaseSecKillOrder(ctx, req.(*IncreaseSecKillOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_IncreaseSecKillProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseSecKillProductsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).IncreaseSecKillProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_IncreaseSecKillProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).IncreaseSecKillProducts(ctx, req.(*IncreaseSecKillProductsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_IncreaseSecKillQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseSecKillQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).IncreaseSecKillQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_IncreaseSecKillQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).IncreaseSecKillQuota(ctx, req.(*IncreaseSecKillQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_IncreaseSecKillUserQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseSecKillUserQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).IncreaseSecKillUserQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_IncreaseSecKillUserQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).IncreaseSecKillUserQuota(ctx, req.(*IncreaseSecKillUserQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_IncreaseSecKillStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseSecKillStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).IncreaseSecKillStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_IncreaseSecKillStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).IncreaseSecKillStock(ctx, req.(*IncreaseSecKillStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_IncreaseSecKillRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseSecKillRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).IncreaseSecKillRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_IncreaseSecKillRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).IncreaseSecKillRecord(ctx, req.(*IncreaseSecKillRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_GetSecKillQuotaByProductsId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecKillQuotaByProductsIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).GetSecKillQuotaByProductsId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_GetSecKillQuotaByProductsId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).GetSecKillQuotaByProductsId(ctx, req.(*GetSecKillQuotaByProductsIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_GetSecKillQuotaByProductsNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecKillQuotaByProductsIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).GetSecKillQuotaByProductsNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_GetSecKillQuotaByProductsNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).GetSecKillQuotaByProductsNum(ctx, req.(*GetSecKillQuotaByProductsIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_GetSecKillProductsByProductsId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecKillProductsByProductsIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).GetSecKillProductsByProductsId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_GetSecKillProductsByProductsId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).GetSecKillProductsByProductsId(ctx, req.(*GetSecKillProductsByProductsIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_GetSecKillUserQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecKillUserQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).GetSecKillUserQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_GetSecKillUserQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).GetSecKillUserQuota(ctx, req.(*GetSecKillUserQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_UpdateSecKillQuotaById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecKillQuotaByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).UpdateSecKillQuotaById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_UpdateSecKillQuotaById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).UpdateSecKillQuotaById(ctx, req.(*UpdateSecKillQuotaByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_UpdateSecKillUserQuotaById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecKillUserQuotaByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).UpdateSecKillUserQuotaById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_UpdateSecKillUserQuotaById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).UpdateSecKillUserQuotaById(ctx, req.(*UpdateSecKillUserQuotaByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_SaveSecKillUserQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSecKillUserQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).SaveSecKillUserQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_SaveSecKillUserQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).SaveSecKillUserQuota(ctx, req.(*SaveSecKillUserQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_SaveSecKillStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSecKillStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).SaveSecKillStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_SaveSecKillStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).SaveSecKillStock(ctx, req.(*SaveSecKillStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_SaveSecKillQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSecKillQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).SaveSecKillQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_SaveSecKillQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).SaveSecKillQuota(ctx, req.(*SaveSecKillQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_GetDecreaseQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDecreaseQuantityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).GetDecreaseQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_GetDecreaseQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).GetDecreaseQuantity(ctx, req.(*GetDecreaseQuantityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_CheckAndDeductQuotaAndStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAndDeductQuotaAndStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).CheckAndDeductQuotaAndStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_CheckAndDeductQuotaAndStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).CheckAndDeductQuotaAndStock(ctx, req.(*CheckAndDeductQuotaAndStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SecKill_ServiceDesc is the grpc.ServiceDesc for SecKill service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecKill_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.secKill",
	HandlerType: (*SecKillServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncreaseSecKillOrder",
			Handler:    _SecKill_IncreaseSecKillOrder_Handler,
		},
		{
			MethodName: "IncreaseSecKillProducts",
			Handler:    _SecKill_IncreaseSecKillProducts_Handler,
		},
		{
			MethodName: "IncreaseSecKillQuota",
			Handler:    _SecKill_IncreaseSecKillQuota_Handler,
		},
		{
			MethodName: "IncreaseSecKillUserQuota",
			Handler:    _SecKill_IncreaseSecKillUserQuota_Handler,
		},
		{
			MethodName: "IncreaseSecKillStock",
			Handler:    _SecKill_IncreaseSecKillStock_Handler,
		},
		{
			MethodName: "IncreaseSecKillRecord",
			Handler:    _SecKill_IncreaseSecKillRecord_Handler,
		},
		{
			MethodName: "GetSecKillQuotaByProductsId",
			Handler:    _SecKill_GetSecKillQuotaByProductsId_Handler,
		},
		{
			MethodName: "GetSecKillQuotaByProductsNum",
			Handler:    _SecKill_GetSecKillQuotaByProductsNum_Handler,
		},
		{
			MethodName: "GetSecKillProductsByProductsId",
			Handler:    _SecKill_GetSecKillProductsByProductsId_Handler,
		},
		{
			MethodName: "GetSecKillUserQuota",
			Handler:    _SecKill_GetSecKillUserQuota_Handler,
		},
		{
			MethodName: "UpdateSecKillQuotaById",
			Handler:    _SecKill_UpdateSecKillQuotaById_Handler,
		},
		{
			MethodName: "UpdateSecKillUserQuotaById",
			Handler:    _SecKill_UpdateSecKillUserQuotaById_Handler,
		},
		{
			MethodName: "SaveSecKillUserQuota",
			Handler:    _SecKill_SaveSecKillUserQuota_Handler,
		},
		{
			MethodName: "SaveSecKillStock",
			Handler:    _SecKill_SaveSecKillStock_Handler,
		},
		{
			MethodName: "SaveSecKillQuota",
			Handler:    _SecKill_SaveSecKillQuota_Handler,
		},
		{
			MethodName: "GetDecreaseQuantity",
			Handler:    _SecKill_GetDecreaseQuantity_Handler,
		},
		{
			MethodName: "CheckAndDeductQuotaAndStock",
			Handler:    _SecKill_CheckAndDeductQuotaAndStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seckill.proto",
}
