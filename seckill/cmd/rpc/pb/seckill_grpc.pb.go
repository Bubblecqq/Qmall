// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: seckill.proto

//import "product/cmd/rpc/product/pb/product.proto";

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecKill_IncreaseSecKillOrder_FullMethodName     = "/pb.secKill/IncreaseSecKillOrder"
	SecKill_IncreaseSecKillProducts_FullMethodName  = "/pb.secKill/IncreaseSecKillProducts"
	SecKill_IncreaseSecKillQuota_FullMethodName     = "/pb.secKill/IncreaseSecKillQuota"
	SecKill_IncreaseSecKillUserQuota_FullMethodName = "/pb.secKill/IncreaseSecKillUserQuota"
	SecKill_IncreaseSecKillStock_FullMethodName     = "/pb.secKill/IncreaseSecKillStock"
	SecKill_IncreaseSecKillRecord_FullMethodName    = "/pb.secKill/IncreaseSecKillRecord"
)

// SecKillClient is the client API for SecKill service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecKillClient interface {
	IncreaseSecKillOrder(ctx context.Context, in *IncreaseSecKillOrderReq, opts ...grpc.CallOption) (*IncreaseSecKillOrderResp, error)
	IncreaseSecKillProducts(ctx context.Context, in *IncreaseSecKillProductsReq, opts ...grpc.CallOption) (*IncreaseSecKillProductsResp, error)
	IncreaseSecKillQuota(ctx context.Context, in *IncreaseSecKillQuotaReq, opts ...grpc.CallOption) (*IncreaseSecKillQuotaResp, error)
	IncreaseSecKillUserQuota(ctx context.Context, in *IncreaseSecKillUserQuotaReq, opts ...grpc.CallOption) (*IncreaseSecKillUserQuotaResp, error)
	IncreaseSecKillStock(ctx context.Context, in *IncreaseSecKillStockReq, opts ...grpc.CallOption) (*IncreaseSecKillStockResp, error)
	IncreaseSecKillRecord(ctx context.Context, in *IncreaseSecKillRecordReq, opts ...grpc.CallOption) (*IncreaseSecKillRecordResp, error)
}

type secKillClient struct {
	cc grpc.ClientConnInterface
}

func NewSecKillClient(cc grpc.ClientConnInterface) SecKillClient {
	return &secKillClient{cc}
}

func (c *secKillClient) IncreaseSecKillOrder(ctx context.Context, in *IncreaseSecKillOrderReq, opts ...grpc.CallOption) (*IncreaseSecKillOrderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncreaseSecKillOrderResp)
	err := c.cc.Invoke(ctx, SecKill_IncreaseSecKillOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) IncreaseSecKillProducts(ctx context.Context, in *IncreaseSecKillProductsReq, opts ...grpc.CallOption) (*IncreaseSecKillProductsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncreaseSecKillProductsResp)
	err := c.cc.Invoke(ctx, SecKill_IncreaseSecKillProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) IncreaseSecKillQuota(ctx context.Context, in *IncreaseSecKillQuotaReq, opts ...grpc.CallOption) (*IncreaseSecKillQuotaResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncreaseSecKillQuotaResp)
	err := c.cc.Invoke(ctx, SecKill_IncreaseSecKillQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) IncreaseSecKillUserQuota(ctx context.Context, in *IncreaseSecKillUserQuotaReq, opts ...grpc.CallOption) (*IncreaseSecKillUserQuotaResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncreaseSecKillUserQuotaResp)
	err := c.cc.Invoke(ctx, SecKill_IncreaseSecKillUserQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) IncreaseSecKillStock(ctx context.Context, in *IncreaseSecKillStockReq, opts ...grpc.CallOption) (*IncreaseSecKillStockResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncreaseSecKillStockResp)
	err := c.cc.Invoke(ctx, SecKill_IncreaseSecKillStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) IncreaseSecKillRecord(ctx context.Context, in *IncreaseSecKillRecordReq, opts ...grpc.CallOption) (*IncreaseSecKillRecordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncreaseSecKillRecordResp)
	err := c.cc.Invoke(ctx, SecKill_IncreaseSecKillRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecKillServer is the server API for SecKill service.
// All implementations must embed UnimplementedSecKillServer
// for forward compatibility.
type SecKillServer interface {
	IncreaseSecKillOrder(context.Context, *IncreaseSecKillOrderReq) (*IncreaseSecKillOrderResp, error)
	IncreaseSecKillProducts(context.Context, *IncreaseSecKillProductsReq) (*IncreaseSecKillProductsResp, error)
	IncreaseSecKillQuota(context.Context, *IncreaseSecKillQuotaReq) (*IncreaseSecKillQuotaResp, error)
	IncreaseSecKillUserQuota(context.Context, *IncreaseSecKillUserQuotaReq) (*IncreaseSecKillUserQuotaResp, error)
	IncreaseSecKillStock(context.Context, *IncreaseSecKillStockReq) (*IncreaseSecKillStockResp, error)
	IncreaseSecKillRecord(context.Context, *IncreaseSecKillRecordReq) (*IncreaseSecKillRecordResp, error)
	mustEmbedUnimplementedSecKillServer()
}

// UnimplementedSecKillServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecKillServer struct{}

func (UnimplementedSecKillServer) IncreaseSecKillOrder(context.Context, *IncreaseSecKillOrderReq) (*IncreaseSecKillOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseSecKillOrder not implemented")
}
func (UnimplementedSecKillServer) IncreaseSecKillProducts(context.Context, *IncreaseSecKillProductsReq) (*IncreaseSecKillProductsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseSecKillProducts not implemented")
}
func (UnimplementedSecKillServer) IncreaseSecKillQuota(context.Context, *IncreaseSecKillQuotaReq) (*IncreaseSecKillQuotaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseSecKillQuota not implemented")
}
func (UnimplementedSecKillServer) IncreaseSecKillUserQuota(context.Context, *IncreaseSecKillUserQuotaReq) (*IncreaseSecKillUserQuotaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseSecKillUserQuota not implemented")
}
func (UnimplementedSecKillServer) IncreaseSecKillStock(context.Context, *IncreaseSecKillStockReq) (*IncreaseSecKillStockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseSecKillStock not implemented")
}
func (UnimplementedSecKillServer) IncreaseSecKillRecord(context.Context, *IncreaseSecKillRecordReq) (*IncreaseSecKillRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseSecKillRecord not implemented")
}
func (UnimplementedSecKillServer) mustEmbedUnimplementedSecKillServer() {}
func (UnimplementedSecKillServer) testEmbeddedByValue()                 {}

// UnsafeSecKillServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecKillServer will
// result in compilation errors.
type UnsafeSecKillServer interface {
	mustEmbedUnimplementedSecKillServer()
}

func RegisterSecKillServer(s grpc.ServiceRegistrar, srv SecKillServer) {
	// If the following call pancis, it indicates UnimplementedSecKillServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecKill_ServiceDesc, srv)
}

func _SecKill_IncreaseSecKillOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseSecKillOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).IncreaseSecKillOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_IncreaseSecKillOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).IncreaseSecKillOrder(ctx, req.(*IncreaseSecKillOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_IncreaseSecKillProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseSecKillProductsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).IncreaseSecKillProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_IncreaseSecKillProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).IncreaseSecKillProducts(ctx, req.(*IncreaseSecKillProductsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_IncreaseSecKillQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseSecKillQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).IncreaseSecKillQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_IncreaseSecKillQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).IncreaseSecKillQuota(ctx, req.(*IncreaseSecKillQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_IncreaseSecKillUserQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseSecKillUserQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).IncreaseSecKillUserQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_IncreaseSecKillUserQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).IncreaseSecKillUserQuota(ctx, req.(*IncreaseSecKillUserQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_IncreaseSecKillStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseSecKillStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).IncreaseSecKillStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_IncreaseSecKillStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).IncreaseSecKillStock(ctx, req.(*IncreaseSecKillStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_IncreaseSecKillRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseSecKillRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).IncreaseSecKillRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_IncreaseSecKillRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).IncreaseSecKillRecord(ctx, req.(*IncreaseSecKillRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SecKill_ServiceDesc is the grpc.ServiceDesc for SecKill service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecKill_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.secKill",
	HandlerType: (*SecKillServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncreaseSecKillOrder",
			Handler:    _SecKill_IncreaseSecKillOrder_Handler,
		},
		{
			MethodName: "IncreaseSecKillProducts",
			Handler:    _SecKill_IncreaseSecKillProducts_Handler,
		},
		{
			MethodName: "IncreaseSecKillQuota",
			Handler:    _SecKill_IncreaseSecKillQuota_Handler,
		},
		{
			MethodName: "IncreaseSecKillUserQuota",
			Handler:    _SecKill_IncreaseSecKillUserQuota_Handler,
		},
		{
			MethodName: "IncreaseSecKillStock",
			Handler:    _SecKill_IncreaseSecKillStock_Handler,
		},
		{
			MethodName: "IncreaseSecKillRecord",
			Handler:    _SecKill_IncreaseSecKillRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seckill.proto",
}
