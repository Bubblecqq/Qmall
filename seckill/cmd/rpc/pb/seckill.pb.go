// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.0
// source: seckill.proto

//import "product/cmd/rpc/product/pb/product.proto";

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 定义秒杀活动消息
type SecKillActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // ID
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                      // 名称
	ActivityStartTime string `protobuf:"bytes,3,opt,name=activity_start_time,json=activityStartTime,proto3" json:"activity_start_time,omitempty"` // 活动开始时间
	ActivityEndTime   string `protobuf:"bytes,4,opt,name=activity_end_time,json=activityEndTime,proto3" json:"activity_end_time,omitempty"`       // 活动结束时间
	IsOnline          int32  `protobuf:"varint,5,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`                             // 是否在线
}

func (x *SecKillActivity) Reset() {
	*x = SecKillActivity{}
	mi := &file_seckill_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecKillActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecKillActivity) ProtoMessage() {}

func (x *SecKillActivity) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecKillActivity.ProtoReflect.Descriptor instead.
func (*SecKillActivity) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{0}
}

func (x *SecKillActivity) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SecKillActivity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecKillActivity) GetActivityStartTime() string {
	if x != nil {
		return x.ActivityStartTime
	}
	return ""
}

func (x *SecKillActivity) GetActivityEndTime() string {
	if x != nil {
		return x.ActivityEndTime
	}
	return ""
}

func (x *SecKillActivity) GetIsOnline() int32 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

// 定义秒杀活动产品消息
type SecKillActivityProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActivityTimeId       int64   `protobuf:"varint,2,opt,name=activity_time_id,json=activityTimeId,proto3" json:"activity_time_id,omitempty"`                    // 活动时间 ID
	ProductId            int64   `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                                     // 产品 ID
	ProductName          string  `protobuf:"bytes,4,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                                // 产品名称
	ProductMainPicture   string  `protobuf:"bytes,5,opt,name=product_main_picture,json=productMainPicture,proto3" json:"product_main_picture,omitempty"`         // 产品主图
	ProductStartingPrice float64 `protobuf:"fixed64,6,opt,name=product_starting_price,json=productStartingPrice,proto3" json:"product_starting_price,omitempty"` // 产品起始价格
	CategoryId           int64   `protobuf:"varint,7,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`                                  // 类别 ID
}

func (x *SecKillActivityProduct) Reset() {
	*x = SecKillActivityProduct{}
	mi := &file_seckill_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecKillActivityProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecKillActivityProduct) ProtoMessage() {}

func (x *SecKillActivityProduct) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecKillActivityProduct.ProtoReflect.Descriptor instead.
func (*SecKillActivityProduct) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{1}
}

func (x *SecKillActivityProduct) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SecKillActivityProduct) GetActivityTimeId() int64 {
	if x != nil {
		return x.ActivityTimeId
	}
	return 0
}

func (x *SecKillActivityProduct) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *SecKillActivityProduct) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *SecKillActivityProduct) GetProductMainPicture() string {
	if x != nil {
		return x.ProductMainPicture
	}
	return ""
}

func (x *SecKillActivityProduct) GetProductStartingPrice() float64 {
	if x != nil {
		return x.ProductStartingPrice
	}
	return 0
}

func (x *SecKillActivityProduct) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

// 定义秒杀活动产品 SKU 消息
type SecKillActivityProductSku struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActivityProductId int64   `protobuf:"varint,2,opt,name=activity_product_id,json=activityProductId,proto3" json:"activity_product_id,omitempty"` // 活动产品 ID
	ProductId         int64   `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                           // 产品 ID
	ProductSkuId      int64   `protobuf:"varint,4,opt,name=product_sku_id,json=productSkuId,proto3" json:"product_sku_id,omitempty"`                // 产品 SKU ID
	Price             float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`                                                   // 价格
	OriginalPrice     float64 `protobuf:"fixed64,6,opt,name=original_price,json=originalPrice,proto3" json:"original_price,omitempty"`              // 原始价格
	Number            int64   `protobuf:"varint,7,opt,name=number,proto3" json:"number,omitempty"`                                                  // 数量
	Stock             int64   `protobuf:"varint,8,opt,name=stock,proto3" json:"stock,omitempty"`                                                    // 库存
}

func (x *SecKillActivityProductSku) Reset() {
	*x = SecKillActivityProductSku{}
	mi := &file_seckill_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecKillActivityProductSku) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecKillActivityProductSku) ProtoMessage() {}

func (x *SecKillActivityProductSku) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecKillActivityProductSku.ProtoReflect.Descriptor instead.
func (*SecKillActivityProductSku) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{2}
}

func (x *SecKillActivityProductSku) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SecKillActivityProductSku) GetActivityProductId() int64 {
	if x != nil {
		return x.ActivityProductId
	}
	return 0
}

func (x *SecKillActivityProductSku) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *SecKillActivityProductSku) GetProductSkuId() int64 {
	if x != nil {
		return x.ProductSkuId
	}
	return 0
}

func (x *SecKillActivityProductSku) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SecKillActivityProductSku) GetOriginalPrice() float64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *SecKillActivityProductSku) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *SecKillActivityProductSku) GetStock() int64 {
	if x != nil {
		return x.Stock
	}
	return 0
}

// 定义秒杀活动时间消息
type SecKillActivityTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActivityId int64  `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"` // 活动 ID
	TimeName   string `protobuf:"bytes,3,opt,name=time_name,json=timeName,proto3" json:"time_name,omitempty"`        // 时间名称
	StartTime  string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`     // 开始时间
	EndTime    string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`           // 结束时间
	IsEnable   int32  `protobuf:"varint,6,opt,name=is_enable,json=isEnable,proto3" json:"is_enable,omitempty"`       // 是否启用
}

func (x *SecKillActivityTime) Reset() {
	*x = SecKillActivityTime{}
	mi := &file_seckill_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecKillActivityTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecKillActivityTime) ProtoMessage() {}

func (x *SecKillActivityTime) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecKillActivityTime.ProtoReflect.Descriptor instead.
func (*SecKillActivityTime) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{3}
}

func (x *SecKillActivityTime) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SecKillActivityTime) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *SecKillActivityTime) GetTimeName() string {
	if x != nil {
		return x.TimeName
	}
	return ""
}

func (x *SecKillActivityTime) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *SecKillActivityTime) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *SecKillActivityTime) GetIsEnable() int32 {
	if x != nil {
		return x.IsEnable
	}
	return 0
}

// 定义秒杀订单消息
type SecKillOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                     // ID
	Seller      int64                  `protobuf:"varint,2,opt,name=seller,proto3" json:"seller,omitempty"`                             // 买方ID
	Buyer       int64                  `protobuf:"varint,3,opt,name=buyer,proto3" json:"buyer,omitempty"`                               // 卖方ID
	ProductsId  int64                  `protobuf:"varint,4,opt,name=products_id,json=productsId,proto3" json:"products_id,omitempty"`   // 商品ID
	ProductsNum string                 `protobuf:"bytes,5,opt,name=products_num,json=productsNum,proto3" json:"products_num,omitempty"` // 商品编号
	OrderNum    string                 `protobuf:"bytes,6,opt,name=order_num,json=orderNum,proto3" json:"order_num,omitempty"`          // 订单号
	Price       float64                `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`                              // 金额
	Status      int32                  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`                             // 状态
	CreateTime  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`    // 创建时间
	UpdateTime  *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`   // 修改时间
}

func (x *SecKillOrder) Reset() {
	*x = SecKillOrder{}
	mi := &file_seckill_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecKillOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecKillOrder) ProtoMessage() {}

func (x *SecKillOrder) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecKillOrder.ProtoReflect.Descriptor instead.
func (*SecKillOrder) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{4}
}

func (x *SecKillOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SecKillOrder) GetSeller() int64 {
	if x != nil {
		return x.Seller
	}
	return 0
}

func (x *SecKillOrder) GetBuyer() int64 {
	if x != nil {
		return x.Buyer
	}
	return 0
}

func (x *SecKillOrder) GetProductsId() int64 {
	if x != nil {
		return x.ProductsId
	}
	return 0
}

func (x *SecKillOrder) GetProductsNum() string {
	if x != nil {
		return x.ProductsNum
	}
	return ""
}

func (x *SecKillOrder) GetOrderNum() string {
	if x != nil {
		return x.OrderNum
	}
	return ""
}

func (x *SecKillOrder) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SecKillOrder) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SecKillOrder) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SecKillOrder) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// 定义秒杀商品消息
type SecKillProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductsNum  string                 `protobuf:"bytes,2,opt,name=products_num,json=productsNum,proto3" json:"products_num,omitempty"`    // 商品编号
	ProductsName string                 `protobuf:"bytes,3,opt,name=products_name,json=productsName,proto3" json:"products_name,omitempty"` // 商品名字
	Price        float64                `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`                                 // 价格
	PictureUrl   string                 `protobuf:"bytes,5,opt,name=picture_url,json=pictureUrl,proto3" json:"picture_url,omitempty"`       // 商品图片
	Seller       int64                  `protobuf:"varint,6,opt,name=seller,proto3" json:"seller,omitempty"`                                // 卖家ID
	CreateTime   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`       // 创建时间
	UpdateTime   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`       // 修改时间
}

func (x *SecKillProducts) Reset() {
	*x = SecKillProducts{}
	mi := &file_seckill_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecKillProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecKillProducts) ProtoMessage() {}

func (x *SecKillProducts) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecKillProducts.ProtoReflect.Descriptor instead.
func (*SecKillProducts) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{5}
}

func (x *SecKillProducts) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SecKillProducts) GetProductsNum() string {
	if x != nil {
		return x.ProductsNum
	}
	return ""
}

func (x *SecKillProducts) GetProductsName() string {
	if x != nil {
		return x.ProductsName
	}
	return ""
}

func (x *SecKillProducts) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SecKillProducts) GetPictureUrl() string {
	if x != nil {
		return x.PictureUrl
	}
	return ""
}

func (x *SecKillProducts) GetSeller() int64 {
	if x != nil {
		return x.Seller
	}
	return 0
}

func (x *SecKillProducts) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SecKillProducts) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// 定义秒杀配额消息
type SecKillQuota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductsId int64                  `protobuf:"varint,2,opt,name=products_id,json=productsId,proto3" json:"products_id,omitempty"`
	Num        int64                  `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *SecKillQuota) Reset() {
	*x = SecKillQuota{}
	mi := &file_seckill_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecKillQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecKillQuota) ProtoMessage() {}

func (x *SecKillQuota) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecKillQuota.ProtoReflect.Descriptor instead.
func (*SecKillQuota) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{6}
}

func (x *SecKillQuota) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SecKillQuota) GetProductsId() int64 {
	if x != nil {
		return x.ProductsId
	}
	return 0
}

func (x *SecKillQuota) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *SecKillQuota) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SecKillQuota) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// 定义秒杀记录消息
type SecKillRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   // ID
	UserId     int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             // 用户ID
	ProductsId int64                  `protobuf:"varint,3,opt,name=products_id,json=productsId,proto3" json:"products_id,omitempty"` // 商品ID
	SecNum     string                 `protobuf:"bytes,4,opt,name=sec_num,json=secNum,proto3" json:"sec_num,omitempty"`              // 秒杀号
	OrderNum   string                 `protobuf:"bytes,5,opt,name=order_num,json=orderNum,proto3" json:"order_num,omitempty"`        // 订单号
	Price      float64                `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`                            // 金额
	Status     int32                  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                           // 状态
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`  // 创建时间
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`  // 修改时间
}

func (x *SecKillRecord) Reset() {
	*x = SecKillRecord{}
	mi := &file_seckill_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecKillRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecKillRecord) ProtoMessage() {}

func (x *SecKillRecord) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecKillRecord.ProtoReflect.Descriptor instead.
func (*SecKillRecord) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{7}
}

func (x *SecKillRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SecKillRecord) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SecKillRecord) GetProductsId() int64 {
	if x != nil {
		return x.ProductsId
	}
	return 0
}

func (x *SecKillRecord) GetSecNum() string {
	if x != nil {
		return x.SecNum
	}
	return ""
}

func (x *SecKillRecord) GetOrderNum() string {
	if x != nil {
		return x.OrderNum
	}
	return ""
}

func (x *SecKillRecord) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SecKillRecord) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SecKillRecord) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SecKillRecord) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// 定义秒杀库存消息
type SecKillStock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   // ID
	ProductsId int64                  `protobuf:"varint,2,opt,name=products_id,json=productsId,proto3" json:"products_id,omitempty"` // 商品ID
	Stock      int64                  `protobuf:"varint,3,opt,name=stock,proto3" json:"stock,omitempty"`                             // 库存大小
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`  // 创建时间
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`  // 修改时间
}

func (x *SecKillStock) Reset() {
	*x = SecKillStock{}
	mi := &file_seckill_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecKillStock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecKillStock) ProtoMessage() {}

func (x *SecKillStock) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecKillStock.ProtoReflect.Descriptor instead.
func (*SecKillStock) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{8}
}

func (x *SecKillStock) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SecKillStock) GetProductsId() int64 {
	if x != nil {
		return x.ProductsId
	}
	return 0
}

func (x *SecKillStock) GetStock() int64 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *SecKillStock) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SecKillStock) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// 定义秒杀用户配额消息
type SecKillUserQuota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId     int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProductsId int64                  `protobuf:"varint,3,opt,name=products_id,json=productsId,proto3" json:"products_id,omitempty"`
	Num        int64                  `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	KilledNum  int64                  `protobuf:"varint,5,opt,name=killed_num,json=killedNum,proto3" json:"killed_num,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *SecKillUserQuota) Reset() {
	*x = SecKillUserQuota{}
	mi := &file_seckill_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecKillUserQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecKillUserQuota) ProtoMessage() {}

func (x *SecKillUserQuota) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecKillUserQuota.ProtoReflect.Descriptor instead.
func (*SecKillUserQuota) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{9}
}

func (x *SecKillUserQuota) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SecKillUserQuota) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SecKillUserQuota) GetProductsId() int64 {
	if x != nil {
		return x.ProductsId
	}
	return 0
}

func (x *SecKillUserQuota) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *SecKillUserQuota) GetKilledNum() int64 {
	if x != nil {
		return x.KilledNum
	}
	return 0
}

func (x *SecKillUserQuota) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SecKillUserQuota) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// 定义添加秒杀商品的请求消息
type IncreaseSecKillProductsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId   int64   `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Price       float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	Seller      int64   `protobuf:"varint,3,opt,name=seller,proto3" json:"seller,omitempty"`
	PictureUrl  string  `protobuf:"bytes,4,opt,name=pictureUrl,proto3" json:"pictureUrl,omitempty"`
	ProductName string  `protobuf:"bytes,5,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
}

func (x *IncreaseSecKillProductsReq) Reset() {
	*x = IncreaseSecKillProductsReq{}
	mi := &file_seckill_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncreaseSecKillProductsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseSecKillProductsReq) ProtoMessage() {}

func (x *IncreaseSecKillProductsReq) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseSecKillProductsReq.ProtoReflect.Descriptor instead.
func (*IncreaseSecKillProductsReq) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{10}
}

func (x *IncreaseSecKillProductsReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *IncreaseSecKillProductsReq) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *IncreaseSecKillProductsReq) GetSeller() int64 {
	if x != nil {
		return x.Seller
	}
	return 0
}

func (x *IncreaseSecKillProductsReq) GetPictureUrl() string {
	if x != nil {
		return x.PictureUrl
	}
	return ""
}

func (x *IncreaseSecKillProductsReq) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

// 定义添加秒杀商品的响应消息
type IncreaseSecKillProductsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seller                    int64                      `protobuf:"varint,1,opt,name=seller,proto3" json:"seller,omitempty"`
	SecKillProducts           *SecKillProducts           `protobuf:"bytes,2,opt,name=secKill_products,json=secKillProducts,proto3" json:"secKill_products,omitempty"`
	SecKillActivity           *SecKillActivity           `protobuf:"bytes,3,opt,name=secKill_activity,json=secKillActivity,proto3" json:"secKill_activity,omitempty"`
	SecKillActivityProductSku *SecKillActivityProductSku `protobuf:"bytes,4,opt,name=secKill_activity_product_sku,json=secKillActivityProductSku,proto3" json:"secKill_activity_product_sku,omitempty"`
}

func (x *IncreaseSecKillProductsResp) Reset() {
	*x = IncreaseSecKillProductsResp{}
	mi := &file_seckill_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncreaseSecKillProductsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseSecKillProductsResp) ProtoMessage() {}

func (x *IncreaseSecKillProductsResp) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseSecKillProductsResp.ProtoReflect.Descriptor instead.
func (*IncreaseSecKillProductsResp) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{11}
}

func (x *IncreaseSecKillProductsResp) GetSeller() int64 {
	if x != nil {
		return x.Seller
	}
	return 0
}

func (x *IncreaseSecKillProductsResp) GetSecKillProducts() *SecKillProducts {
	if x != nil {
		return x.SecKillProducts
	}
	return nil
}

func (x *IncreaseSecKillProductsResp) GetSecKillActivity() *SecKillActivity {
	if x != nil {
		return x.SecKillActivity
	}
	return nil
}

func (x *IncreaseSecKillProductsResp) GetSecKillActivityProductSku() *SecKillActivityProductSku {
	if x != nil {
		return x.SecKillActivityProductSku
	}
	return nil
}

// 定义添加秒杀限额的请求消息
type IncreaseSecKillQuotaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId   int64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	LimitNumber int64 `protobuf:"varint,2,opt,name=limit_number,json=limitNumber,proto3" json:"limit_number,omitempty"`
}

func (x *IncreaseSecKillQuotaReq) Reset() {
	*x = IncreaseSecKillQuotaReq{}
	mi := &file_seckill_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncreaseSecKillQuotaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseSecKillQuotaReq) ProtoMessage() {}

func (x *IncreaseSecKillQuotaReq) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseSecKillQuotaReq.ProtoReflect.Descriptor instead.
func (*IncreaseSecKillQuotaReq) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{12}
}

func (x *IncreaseSecKillQuotaReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *IncreaseSecKillQuotaReq) GetLimitNumber() int64 {
	if x != nil {
		return x.LimitNumber
	}
	return 0
}

// 定义添加秒杀限额的响应消息
type IncreaseSecKillQuotaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecKillProducts *SecKillProducts `protobuf:"bytes,1,opt,name=secKill_products,json=secKillProducts,proto3" json:"secKill_products,omitempty"`
	SecKillQuota    *SecKillQuota    `protobuf:"bytes,2,opt,name=secKill_quota,json=secKillQuota,proto3" json:"secKill_quota,omitempty"`
}

func (x *IncreaseSecKillQuotaResp) Reset() {
	*x = IncreaseSecKillQuotaResp{}
	mi := &file_seckill_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncreaseSecKillQuotaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseSecKillQuotaResp) ProtoMessage() {}

func (x *IncreaseSecKillQuotaResp) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseSecKillQuotaResp.ProtoReflect.Descriptor instead.
func (*IncreaseSecKillQuotaResp) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{13}
}

func (x *IncreaseSecKillQuotaResp) GetSecKillProducts() *SecKillProducts {
	if x != nil {
		return x.SecKillProducts
	}
	return nil
}

func (x *IncreaseSecKillQuotaResp) GetSecKillQuota() *SecKillQuota {
	if x != nil {
		return x.SecKillQuota
	}
	return nil
}

// 定义添加秒杀用户限额的请求消息
type IncreaseSecKillUserQuotaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProductsId int64 `protobuf:"varint,2,opt,name=products_id,json=productsId,proto3" json:"products_id,omitempty"`
	Num        int64 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	KilledNum  int64 `protobuf:"varint,4,opt,name=killedNum,proto3" json:"killedNum,omitempty"`
}

func (x *IncreaseSecKillUserQuotaReq) Reset() {
	*x = IncreaseSecKillUserQuotaReq{}
	mi := &file_seckill_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncreaseSecKillUserQuotaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseSecKillUserQuotaReq) ProtoMessage() {}

func (x *IncreaseSecKillUserQuotaReq) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseSecKillUserQuotaReq.ProtoReflect.Descriptor instead.
func (*IncreaseSecKillUserQuotaReq) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{14}
}

func (x *IncreaseSecKillUserQuotaReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *IncreaseSecKillUserQuotaReq) GetProductsId() int64 {
	if x != nil {
		return x.ProductsId
	}
	return 0
}

func (x *IncreaseSecKillUserQuotaReq) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *IncreaseSecKillUserQuotaReq) GetKilledNum() int64 {
	if x != nil {
		return x.KilledNum
	}
	return 0
}

// 定义添加秒杀用户限额的响应消息
type IncreaseSecKillUserQuotaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecKillUserQuota *SecKillUserQuota `protobuf:"bytes,1,opt,name=secKill_user_quota,json=secKillUserQuota,proto3" json:"secKill_user_quota,omitempty"`
}

func (x *IncreaseSecKillUserQuotaResp) Reset() {
	*x = IncreaseSecKillUserQuotaResp{}
	mi := &file_seckill_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncreaseSecKillUserQuotaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseSecKillUserQuotaResp) ProtoMessage() {}

func (x *IncreaseSecKillUserQuotaResp) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseSecKillUserQuotaResp.ProtoReflect.Descriptor instead.
func (*IncreaseSecKillUserQuotaResp) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{15}
}

func (x *IncreaseSecKillUserQuotaResp) GetSecKillUserQuota() *SecKillUserQuota {
	if x != nil {
		return x.SecKillUserQuota
	}
	return nil
}

// 定义添加秒杀库存的请求消息
type IncreaseSecKillStockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductsId int64 `protobuf:"varint,1,opt,name=products_id,json=productsId,proto3" json:"products_id,omitempty"`
	Stock      int64 `protobuf:"varint,2,opt,name=stock,proto3" json:"stock,omitempty"`
}

func (x *IncreaseSecKillStockReq) Reset() {
	*x = IncreaseSecKillStockReq{}
	mi := &file_seckill_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncreaseSecKillStockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseSecKillStockReq) ProtoMessage() {}

func (x *IncreaseSecKillStockReq) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseSecKillStockReq.ProtoReflect.Descriptor instead.
func (*IncreaseSecKillStockReq) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{16}
}

func (x *IncreaseSecKillStockReq) GetProductsId() int64 {
	if x != nil {
		return x.ProductsId
	}
	return 0
}

func (x *IncreaseSecKillStockReq) GetStock() int64 {
	if x != nil {
		return x.Stock
	}
	return 0
}

// 定义添加秒杀库存的响应消息
type IncreaseSecKillStockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecKillStock *SecKillStock `protobuf:"bytes,1,opt,name=secKill_stock,json=secKillStock,proto3" json:"secKill_stock,omitempty"`
}

func (x *IncreaseSecKillStockResp) Reset() {
	*x = IncreaseSecKillStockResp{}
	mi := &file_seckill_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncreaseSecKillStockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseSecKillStockResp) ProtoMessage() {}

func (x *IncreaseSecKillStockResp) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseSecKillStockResp.ProtoReflect.Descriptor instead.
func (*IncreaseSecKillStockResp) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{17}
}

func (x *IncreaseSecKillStockResp) GetSecKillStock() *SecKillStock {
	if x != nil {
		return x.SecKillStock
	}
	return nil
}

// 定义添加秒杀记录的请求消息
type IncreaseSecKillRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProductsId int64   `protobuf:"varint,2,opt,name=products_id,json=productsId,proto3" json:"products_id,omitempty"`
	Price      float64 `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	OrderNo    string  `protobuf:"bytes,4,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
}

func (x *IncreaseSecKillRecordReq) Reset() {
	*x = IncreaseSecKillRecordReq{}
	mi := &file_seckill_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncreaseSecKillRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseSecKillRecordReq) ProtoMessage() {}

func (x *IncreaseSecKillRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseSecKillRecordReq.ProtoReflect.Descriptor instead.
func (*IncreaseSecKillRecordReq) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{18}
}

func (x *IncreaseSecKillRecordReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *IncreaseSecKillRecordReq) GetProductsId() int64 {
	if x != nil {
		return x.ProductsId
	}
	return 0
}

func (x *IncreaseSecKillRecordReq) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *IncreaseSecKillRecordReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

// 定义添加秒杀记录的响应消息
type IncreaseSecKillRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecKillRecord *SecKillRecord `protobuf:"bytes,1,opt,name=secKill_record,json=secKillRecord,proto3" json:"secKill_record,omitempty"`
}

func (x *IncreaseSecKillRecordResp) Reset() {
	*x = IncreaseSecKillRecordResp{}
	mi := &file_seckill_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncreaseSecKillRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseSecKillRecordResp) ProtoMessage() {}

func (x *IncreaseSecKillRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseSecKillRecordResp.ProtoReflect.Descriptor instead.
func (*IncreaseSecKillRecordResp) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{19}
}

func (x *IncreaseSecKillRecordResp) GetSecKillRecord() *SecKillRecord {
	if x != nil {
		return x.SecKillRecord
	}
	return nil
}

// 定义添加秒杀订单的请求消息
type IncreaseSecKillOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seller      int64  `protobuf:"varint,1,opt,name=seller,proto3" json:"seller,omitempty"`                             // 买方 ID
	Buyer       int64  `protobuf:"varint,2,opt,name=buyer,proto3" json:"buyer,omitempty"`                               // 卖方 ID
	ProductsId  int64  `protobuf:"varint,3,opt,name=products_id,json=productsId,proto3" json:"products_id,omitempty"`   // 商品 ID
	ProductsNum string `protobuf:"bytes,4,opt,name=products_num,json=productsNum,proto3" json:"products_num,omitempty"` // 商品编号
	OrderNum    string `protobuf:"bytes,5,opt,name=order_num,json=orderNum,proto3" json:"order_num,omitempty"`          // 订单号
	Price       string `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`                                // 金额
}

func (x *IncreaseSecKillOrderReq) Reset() {
	*x = IncreaseSecKillOrderReq{}
	mi := &file_seckill_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncreaseSecKillOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseSecKillOrderReq) ProtoMessage() {}

func (x *IncreaseSecKillOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseSecKillOrderReq.ProtoReflect.Descriptor instead.
func (*IncreaseSecKillOrderReq) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{20}
}

func (x *IncreaseSecKillOrderReq) GetSeller() int64 {
	if x != nil {
		return x.Seller
	}
	return 0
}

func (x *IncreaseSecKillOrderReq) GetBuyer() int64 {
	if x != nil {
		return x.Buyer
	}
	return 0
}

func (x *IncreaseSecKillOrderReq) GetProductsId() int64 {
	if x != nil {
		return x.ProductsId
	}
	return 0
}

func (x *IncreaseSecKillOrderReq) GetProductsNum() string {
	if x != nil {
		return x.ProductsNum
	}
	return ""
}

func (x *IncreaseSecKillOrderReq) GetOrderNum() string {
	if x != nil {
		return x.OrderNum
	}
	return ""
}

func (x *IncreaseSecKillOrderReq) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

// 定义添加秒杀订单的响应消息
type IncreaseSecKillOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecKillActivity *SecKillActivity `protobuf:"bytes,1,opt,name=secKill_activity,json=secKillActivity,proto3" json:"secKill_activity,omitempty"`
	SecKillOrder    *SecKillOrder    `protobuf:"bytes,2,opt,name=secKill_order,json=secKillOrder,proto3" json:"secKill_order,omitempty"`
	SecKillProducts *SecKillProducts `protobuf:"bytes,3,opt,name=secKill_products,json=secKillProducts,proto3" json:"secKill_products,omitempty"`
	SecKillRecord   *SecKillRecord   `protobuf:"bytes,4,opt,name=secKill_record,json=secKillRecord,proto3" json:"secKill_record,omitempty"`
}

func (x *IncreaseSecKillOrderResp) Reset() {
	*x = IncreaseSecKillOrderResp{}
	mi := &file_seckill_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncreaseSecKillOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseSecKillOrderResp) ProtoMessage() {}

func (x *IncreaseSecKillOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseSecKillOrderResp.ProtoReflect.Descriptor instead.
func (*IncreaseSecKillOrderResp) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{21}
}

func (x *IncreaseSecKillOrderResp) GetSecKillActivity() *SecKillActivity {
	if x != nil {
		return x.SecKillActivity
	}
	return nil
}

func (x *IncreaseSecKillOrderResp) GetSecKillOrder() *SecKillOrder {
	if x != nil {
		return x.SecKillOrder
	}
	return nil
}

func (x *IncreaseSecKillOrderResp) GetSecKillProducts() *SecKillProducts {
	if x != nil {
		return x.SecKillProducts
	}
	return nil
}

func (x *IncreaseSecKillOrderResp) GetSecKillRecord() *SecKillRecord {
	if x != nil {
		return x.SecKillRecord
	}
	return nil
}

// 查询接口
type GetSecKillQuotaByProductsIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId int64 `protobuf:"varint,1,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
}

func (x *GetSecKillQuotaByProductsIdReq) Reset() {
	*x = GetSecKillQuotaByProductsIdReq{}
	mi := &file_seckill_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSecKillQuotaByProductsIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecKillQuotaByProductsIdReq) ProtoMessage() {}

func (x *GetSecKillQuotaByProductsIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecKillQuotaByProductsIdReq.ProtoReflect.Descriptor instead.
func (*GetSecKillQuotaByProductsIdReq) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{22}
}

func (x *GetSecKillQuotaByProductsIdReq) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type GetSecKillQuotaByProductsIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecKillQuota *SecKillQuota `protobuf:"bytes,1,opt,name=secKill_quota,json=secKillQuota,proto3" json:"secKill_quota,omitempty"`
}

func (x *GetSecKillQuotaByProductsIdResp) Reset() {
	*x = GetSecKillQuotaByProductsIdResp{}
	mi := &file_seckill_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSecKillQuotaByProductsIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecKillQuotaByProductsIdResp) ProtoMessage() {}

func (x *GetSecKillQuotaByProductsIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_seckill_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecKillQuotaByProductsIdResp.ProtoReflect.Descriptor instead.
func (*GetSecKillQuotaByProductsIdResp) Descriptor() ([]byte, []int) {
	return file_seckill_proto_rawDescGZIP(), []int{23}
}

func (x *GetSecKillQuotaByProductsIdResp) GetSecKillQuota() *SecKillQuota {
	if x != nil {
		return x.SecKillQuota
	}
	return nil
}

var File_seckill_proto protoreflect.FileDescriptor

var file_seckill_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x16, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x19, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x6b, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x6b,
	0x75, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x22, 0xba, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0xd5, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x63,
	0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xcb, 0x01,
	0x0a, 0x0c, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x0d,
	0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x4e, 0x75, 0x6d,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c,
	0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x4b,
	0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6b, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xac, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65,
	0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x95, 0x02, 0x0a, 0x1b, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63,
	0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x4b,
	0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x4b,
	0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x1c, 0x73, 0x65, 0x63, 0x4b,
	0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x52, 0x19, 0x73,
	0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x22, 0x5b, 0x0a, 0x17, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x91, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x12, 0x35, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x0c, 0x73, 0x65, 0x63,
	0x4b, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x22, 0x87, 0x01, 0x0a, 0x1b, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x4e, 0x75, 0x6d, 0x22, 0x62, 0x0a, 0x1c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x10, 0x73, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x17, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0x51, 0x0a, 0x18, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x0c,
	0x73, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0x85, 0x01, 0x0a,
	0x18, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x22, 0x55, 0x0a, 0x19, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x38, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x73, 0x65,
	0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x17,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x8b, 0x02, 0x0a,
	0x18, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x65, 0x63,
	0x4b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x4b, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x0d, 0x73, 0x65, 0x63,
	0x4b, 0x69, 0x6c, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x3e, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52,
	0x0f, 0x73, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x12, 0x38, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x73, 0x65, 0x63,
	0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x3e, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a,
	0x0d, 0x73, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c,
	0x6c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x32, 0xfb, 0x04, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c,
	0x12, 0x51, 0x0a, 0x14, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63, 0x4b,
	0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x17, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1e,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63, 0x4b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63, 0x4b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x51, 0x0a, 0x14, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63, 0x4b, 0x69,
	0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x5d, 0x0a, 0x18, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65,
	0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1f,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63, 0x4b,
	0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a,
	0x20, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63,
	0x4b, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x51, 0x0a, 0x14, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63,
	0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x15, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63, 0x4b, 0x69,
	0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x62,
	0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x4b, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_seckill_proto_rawDescOnce sync.Once
	file_seckill_proto_rawDescData = file_seckill_proto_rawDesc
)

func file_seckill_proto_rawDescGZIP() []byte {
	file_seckill_proto_rawDescOnce.Do(func() {
		file_seckill_proto_rawDescData = protoimpl.X.CompressGZIP(file_seckill_proto_rawDescData)
	})
	return file_seckill_proto_rawDescData
}

var file_seckill_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_seckill_proto_goTypes = []any{
	(*SecKillActivity)(nil),                 // 0: pb.SecKillActivity
	(*SecKillActivityProduct)(nil),          // 1: pb.SecKillActivityProduct
	(*SecKillActivityProductSku)(nil),       // 2: pb.SecKillActivityProductSku
	(*SecKillActivityTime)(nil),             // 3: pb.SecKillActivityTime
	(*SecKillOrder)(nil),                    // 4: pb.SecKillOrder
	(*SecKillProducts)(nil),                 // 5: pb.SecKillProducts
	(*SecKillQuota)(nil),                    // 6: pb.SecKillQuota
	(*SecKillRecord)(nil),                   // 7: pb.SecKillRecord
	(*SecKillStock)(nil),                    // 8: pb.SecKillStock
	(*SecKillUserQuota)(nil),                // 9: pb.SecKillUserQuota
	(*IncreaseSecKillProductsReq)(nil),      // 10: pb.IncreaseSecKillProductsReq
	(*IncreaseSecKillProductsResp)(nil),     // 11: pb.IncreaseSecKillProductsResp
	(*IncreaseSecKillQuotaReq)(nil),         // 12: pb.IncreaseSecKillQuotaReq
	(*IncreaseSecKillQuotaResp)(nil),        // 13: pb.IncreaseSecKillQuotaResp
	(*IncreaseSecKillUserQuotaReq)(nil),     // 14: pb.IncreaseSecKillUserQuotaReq
	(*IncreaseSecKillUserQuotaResp)(nil),    // 15: pb.IncreaseSecKillUserQuotaResp
	(*IncreaseSecKillStockReq)(nil),         // 16: pb.IncreaseSecKillStockReq
	(*IncreaseSecKillStockResp)(nil),        // 17: pb.IncreaseSecKillStockResp
	(*IncreaseSecKillRecordReq)(nil),        // 18: pb.IncreaseSecKillRecordReq
	(*IncreaseSecKillRecordResp)(nil),       // 19: pb.IncreaseSecKillRecordResp
	(*IncreaseSecKillOrderReq)(nil),         // 20: pb.IncreaseSecKillOrderReq
	(*IncreaseSecKillOrderResp)(nil),        // 21: pb.IncreaseSecKillOrderResp
	(*GetSecKillQuotaByProductsIdReq)(nil),  // 22: pb.GetSecKillQuotaByProductsIdReq
	(*GetSecKillQuotaByProductsIdResp)(nil), // 23: pb.GetSecKillQuotaByProductsIdResp
	(*timestamppb.Timestamp)(nil),           // 24: google.protobuf.Timestamp
}
var file_seckill_proto_depIdxs = []int32{
	24, // 0: pb.SecKillOrder.create_time:type_name -> google.protobuf.Timestamp
	24, // 1: pb.SecKillOrder.update_time:type_name -> google.protobuf.Timestamp
	24, // 2: pb.SecKillProducts.create_time:type_name -> google.protobuf.Timestamp
	24, // 3: pb.SecKillProducts.update_time:type_name -> google.protobuf.Timestamp
	24, // 4: pb.SecKillQuota.create_time:type_name -> google.protobuf.Timestamp
	24, // 5: pb.SecKillQuota.update_time:type_name -> google.protobuf.Timestamp
	24, // 6: pb.SecKillRecord.create_time:type_name -> google.protobuf.Timestamp
	24, // 7: pb.SecKillRecord.update_time:type_name -> google.protobuf.Timestamp
	24, // 8: pb.SecKillStock.create_time:type_name -> google.protobuf.Timestamp
	24, // 9: pb.SecKillStock.update_time:type_name -> google.protobuf.Timestamp
	24, // 10: pb.SecKillUserQuota.create_time:type_name -> google.protobuf.Timestamp
	24, // 11: pb.SecKillUserQuota.update_time:type_name -> google.protobuf.Timestamp
	5,  // 12: pb.IncreaseSecKillProductsResp.secKill_products:type_name -> pb.SecKillProducts
	0,  // 13: pb.IncreaseSecKillProductsResp.secKill_activity:type_name -> pb.SecKillActivity
	2,  // 14: pb.IncreaseSecKillProductsResp.secKill_activity_product_sku:type_name -> pb.SecKillActivityProductSku
	5,  // 15: pb.IncreaseSecKillQuotaResp.secKill_products:type_name -> pb.SecKillProducts
	6,  // 16: pb.IncreaseSecKillQuotaResp.secKill_quota:type_name -> pb.SecKillQuota
	9,  // 17: pb.IncreaseSecKillUserQuotaResp.secKill_user_quota:type_name -> pb.SecKillUserQuota
	8,  // 18: pb.IncreaseSecKillStockResp.secKill_stock:type_name -> pb.SecKillStock
	7,  // 19: pb.IncreaseSecKillRecordResp.secKill_record:type_name -> pb.SecKillRecord
	0,  // 20: pb.IncreaseSecKillOrderResp.secKill_activity:type_name -> pb.SecKillActivity
	4,  // 21: pb.IncreaseSecKillOrderResp.secKill_order:type_name -> pb.SecKillOrder
	5,  // 22: pb.IncreaseSecKillOrderResp.secKill_products:type_name -> pb.SecKillProducts
	7,  // 23: pb.IncreaseSecKillOrderResp.secKill_record:type_name -> pb.SecKillRecord
	6,  // 24: pb.GetSecKillQuotaByProductsIdResp.secKill_quota:type_name -> pb.SecKillQuota
	20, // 25: pb.secKill.IncreaseSecKillOrder:input_type -> pb.IncreaseSecKillOrderReq
	10, // 26: pb.secKill.IncreaseSecKillProducts:input_type -> pb.IncreaseSecKillProductsReq
	12, // 27: pb.secKill.IncreaseSecKillQuota:input_type -> pb.IncreaseSecKillQuotaReq
	14, // 28: pb.secKill.IncreaseSecKillUserQuota:input_type -> pb.IncreaseSecKillUserQuotaReq
	16, // 29: pb.secKill.IncreaseSecKillStock:input_type -> pb.IncreaseSecKillStockReq
	18, // 30: pb.secKill.IncreaseSecKillRecord:input_type -> pb.IncreaseSecKillRecordReq
	22, // 31: pb.secKill.GetSecKillQuotaByProductsId:input_type -> pb.GetSecKillQuotaByProductsIdReq
	21, // 32: pb.secKill.IncreaseSecKillOrder:output_type -> pb.IncreaseSecKillOrderResp
	11, // 33: pb.secKill.IncreaseSecKillProducts:output_type -> pb.IncreaseSecKillProductsResp
	13, // 34: pb.secKill.IncreaseSecKillQuota:output_type -> pb.IncreaseSecKillQuotaResp
	15, // 35: pb.secKill.IncreaseSecKillUserQuota:output_type -> pb.IncreaseSecKillUserQuotaResp
	17, // 36: pb.secKill.IncreaseSecKillStock:output_type -> pb.IncreaseSecKillStockResp
	19, // 37: pb.secKill.IncreaseSecKillRecord:output_type -> pb.IncreaseSecKillRecordResp
	23, // 38: pb.secKill.GetSecKillQuotaByProductsId:output_type -> pb.GetSecKillQuotaByProductsIdResp
	32, // [32:39] is the sub-list for method output_type
	25, // [25:32] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_seckill_proto_init() }
func file_seckill_proto_init() {
	if File_seckill_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_seckill_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_seckill_proto_goTypes,
		DependencyIndexes: file_seckill_proto_depIdxs,
		MessageInfos:      file_seckill_proto_msgTypes,
	}.Build()
	File_seckill_proto = out.File
	file_seckill_proto_rawDesc = nil
	file_seckill_proto_goTypes = nil
	file_seckill_proto_depIdxs = nil
}
