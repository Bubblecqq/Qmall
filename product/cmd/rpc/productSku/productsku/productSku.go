// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: productSku.proto

package productsku

import (
	"context"

	"goZeroDemo4/product/cmd/rpc/productSku/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateProductSkuReq   = pb.CreateProductSkuReq
	CreateProductSkuResp  = pb.CreateProductSkuResp
	DeleteProductSkuReq   = pb.DeleteProductSkuReq
	DeleteProductSkuResp  = pb.DeleteProductSkuResp
	GetProductSkuByIdReq  = pb.GetProductSkuByIdReq
	GetProductSkuByIdResp = pb.GetProductSkuByIdResp
	GetProductSkuListReq  = pb.GetProductSkuListReq
	GetProductSkuListResp = pb.GetProductSkuListResp
	ProductSku            = pb.ProductSku

	ProductSkuZrpcClient interface {
		CreateProductSku(ctx context.Context, in *CreateProductSkuReq, opts ...grpc.CallOption) (*CreateProductSkuResp, error)
		GetProductListSku(ctx context.Context, in *GetProductSkuListReq, opts ...grpc.CallOption) (*GetProductSkuListResp, error)
		DeleteProductSku(ctx context.Context, in *DeleteProductSkuReq, opts ...grpc.CallOption) (*DeleteProductSkuResp, error)
		GetProductSku(ctx context.Context, in *GetProductSkuByIdReq, opts ...grpc.CallOption) (*GetProductSkuByIdResp, error)
	}

	defaultProductSkuZrpcClient struct {
		cli zrpc.Client
	}
)

func NewProductSkuZrpcClient(cli zrpc.Client) ProductSkuZrpcClient {
	return &defaultProductSkuZrpcClient{
		cli: cli,
	}
}

func (m *defaultProductSkuZrpcClient) CreateProductSku(ctx context.Context, in *CreateProductSkuReq, opts ...grpc.CallOption) (*CreateProductSkuResp, error) {
	client := pb.NewProductSkuClient(m.cli.Conn())
	return client.CreateProductSku(ctx, in, opts...)
}

func (m *defaultProductSkuZrpcClient) GetProductListSku(ctx context.Context, in *GetProductSkuListReq, opts ...grpc.CallOption) (*GetProductSkuListResp, error) {
	client := pb.NewProductSkuClient(m.cli.Conn())
	return client.GetProductListSku(ctx, in, opts...)
}

func (m *defaultProductSkuZrpcClient) DeleteProductSku(ctx context.Context, in *DeleteProductSkuReq, opts ...grpc.CallOption) (*DeleteProductSkuResp, error) {
	client := pb.NewProductSkuClient(m.cli.Conn())
	return client.DeleteProductSku(ctx, in, opts...)
}

func (m *defaultProductSkuZrpcClient) GetProductSku(ctx context.Context, in *GetProductSkuByIdReq, opts ...grpc.CallOption) (*GetProductSkuByIdResp, error) {
	client := pb.NewProductSkuClient(m.cli.Conn())
	return client.GetProductSku(ctx, in, opts...)
}
