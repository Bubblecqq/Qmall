// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: productSku.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductSku_CreateProductSku_FullMethodName  = "/pb.productSku/CreateProductSku"
	ProductSku_GetProductListSku_FullMethodName = "/pb.productSku/GetProductListSku"
	ProductSku_DeleteProductSku_FullMethodName  = "/pb.productSku/DeleteProductSku"
	ProductSku_GetProductSku_FullMethodName     = "/pb.productSku/GetProductSku"
)

// ProductSkuClient is the client API for ProductSku service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductSkuClient interface {
	CreateProductSku(ctx context.Context, in *CreateProductSkuReq, opts ...grpc.CallOption) (*CreateProductSkuResp, error)
	GetProductListSku(ctx context.Context, in *GetProductSkuListReq, opts ...grpc.CallOption) (*GetProductSkuListResp, error)
	DeleteProductSku(ctx context.Context, in *DeleteProductSkuReq, opts ...grpc.CallOption) (*DeleteProductSkuResp, error)
	GetProductSku(ctx context.Context, in *GetProductSkuByIdReq, opts ...grpc.CallOption) (*GetProductSkuByIdResp, error)
}

type productSkuClient struct {
	cc grpc.ClientConnInterface
}

func NewProductSkuClient(cc grpc.ClientConnInterface) ProductSkuClient {
	return &productSkuClient{cc}
}

func (c *productSkuClient) CreateProductSku(ctx context.Context, in *CreateProductSkuReq, opts ...grpc.CallOption) (*CreateProductSkuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProductSkuResp)
	err := c.cc.Invoke(ctx, ProductSku_CreateProductSku_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSkuClient) GetProductListSku(ctx context.Context, in *GetProductSkuListReq, opts ...grpc.CallOption) (*GetProductSkuListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductSkuListResp)
	err := c.cc.Invoke(ctx, ProductSku_GetProductListSku_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSkuClient) DeleteProductSku(ctx context.Context, in *DeleteProductSkuReq, opts ...grpc.CallOption) (*DeleteProductSkuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductSkuResp)
	err := c.cc.Invoke(ctx, ProductSku_DeleteProductSku_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSkuClient) GetProductSku(ctx context.Context, in *GetProductSkuByIdReq, opts ...grpc.CallOption) (*GetProductSkuByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductSkuByIdResp)
	err := c.cc.Invoke(ctx, ProductSku_GetProductSku_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductSkuServer is the server API for ProductSku service.
// All implementations must embed UnimplementedProductSkuServer
// for forward compatibility.
type ProductSkuServer interface {
	CreateProductSku(context.Context, *CreateProductSkuReq) (*CreateProductSkuResp, error)
	GetProductListSku(context.Context, *GetProductSkuListReq) (*GetProductSkuListResp, error)
	DeleteProductSku(context.Context, *DeleteProductSkuReq) (*DeleteProductSkuResp, error)
	GetProductSku(context.Context, *GetProductSkuByIdReq) (*GetProductSkuByIdResp, error)
	mustEmbedUnimplementedProductSkuServer()
}

// UnimplementedProductSkuServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductSkuServer struct{}

func (UnimplementedProductSkuServer) CreateProductSku(context.Context, *CreateProductSkuReq) (*CreateProductSkuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductSku not implemented")
}
func (UnimplementedProductSkuServer) GetProductListSku(context.Context, *GetProductSkuListReq) (*GetProductSkuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductListSku not implemented")
}
func (UnimplementedProductSkuServer) DeleteProductSku(context.Context, *DeleteProductSkuReq) (*DeleteProductSkuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductSku not implemented")
}
func (UnimplementedProductSkuServer) GetProductSku(context.Context, *GetProductSkuByIdReq) (*GetProductSkuByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductSku not implemented")
}
func (UnimplementedProductSkuServer) mustEmbedUnimplementedProductSkuServer() {}
func (UnimplementedProductSkuServer) testEmbeddedByValue()                    {}

// UnsafeProductSkuServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductSkuServer will
// result in compilation errors.
type UnsafeProductSkuServer interface {
	mustEmbedUnimplementedProductSkuServer()
}

func RegisterProductSkuServer(s grpc.ServiceRegistrar, srv ProductSkuServer) {
	// If the following call pancis, it indicates UnimplementedProductSkuServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductSku_ServiceDesc, srv)
}

func _ProductSku_CreateProductSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductSkuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSkuServer).CreateProductSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSku_CreateProductSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSkuServer).CreateProductSku(ctx, req.(*CreateProductSkuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSku_GetProductListSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductSkuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSkuServer).GetProductListSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSku_GetProductListSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSkuServer).GetProductListSku(ctx, req.(*GetProductSkuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSku_DeleteProductSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductSkuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSkuServer).DeleteProductSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSku_DeleteProductSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSkuServer).DeleteProductSku(ctx, req.(*DeleteProductSkuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSku_GetProductSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductSkuByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSkuServer).GetProductSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSku_GetProductSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSkuServer).GetProductSku(ctx, req.(*GetProductSkuByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductSku_ServiceDesc is the grpc.ServiceDesc for ProductSku service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductSku_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.productSku",
	HandlerType: (*ProductSkuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProductSku",
			Handler:    _ProductSku_CreateProductSku_Handler,
		},
		{
			MethodName: "GetProductListSku",
			Handler:    _ProductSku_GetProductListSku_Handler,
		},
		{
			MethodName: "DeleteProductSku",
			Handler:    _ProductSku_DeleteProductSku_Handler,
		},
		{
			MethodName: "GetProductSku",
			Handler:    _ProductSku_GetProductSku_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "productSku.proto",
}
