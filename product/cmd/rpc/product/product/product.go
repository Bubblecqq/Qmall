// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: product.proto

package product

import (
	"context"

	"goZeroDemo4/product/cmd/rpc/product/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateProductReq   = pb.CreateProductReq
	CreateProductResp  = pb.CreateProductResp
	DeleteProductReq   = pb.DeleteProductReq
	DeleteProductResp  = pb.DeleteProductResp
	GetProductListReq  = pb.GetProductListReq
	GetProductListResp = pb.GetProductListResp
	GetProductReq      = pb.GetProductReq
	GetProductResp     = pb.GetProductResp
	Product            = pb.Product

	ProductZrpcClient interface {
		CreateProduct(ctx context.Context, in *CreateProductReq, opts ...grpc.CallOption) (*CreateProductResp, error)
		GetProductList(ctx context.Context, in *GetProductListReq, opts ...grpc.CallOption) (*GetProductListResp, error)
		DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...grpc.CallOption) (*DeleteProductResp, error)
		GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*GetProductResp, error)
	}

	defaultProductZrpcClient struct {
		cli zrpc.Client
	}
)

func NewProductZrpcClient(cli zrpc.Client) ProductZrpcClient {
	return &defaultProductZrpcClient{
		cli: cli,
	}
}

func (m *defaultProductZrpcClient) CreateProduct(ctx context.Context, in *CreateProductReq, opts ...grpc.CallOption) (*CreateProductResp, error) {
	client := pb.NewProductClient(m.cli.Conn())
	return client.CreateProduct(ctx, in, opts...)
}

func (m *defaultProductZrpcClient) GetProductList(ctx context.Context, in *GetProductListReq, opts ...grpc.CallOption) (*GetProductListResp, error) {
	client := pb.NewProductClient(m.cli.Conn())
	return client.GetProductList(ctx, in, opts...)
}

func (m *defaultProductZrpcClient) DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...grpc.CallOption) (*DeleteProductResp, error) {
	client := pb.NewProductClient(m.cli.Conn())
	return client.DeleteProduct(ctx, in, opts...)
}

func (m *defaultProductZrpcClient) GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*GetProductResp, error) {
	client := pb.NewProductClient(m.cli.Conn())
	return client.GetProduct(ctx, in, opts...)
}
