// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: cart.proto

//import "product/cmd/rpc/product/pb/product.proto";

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShoppingCart_AddCart_FullMethodName    = "/pb.shopping_cart/AddCart"
	ShoppingCart_UpdateCart_FullMethodName = "/pb.shopping_cart/UpdateCart"
	ShoppingCart_FindCart_FullMethodName   = "/pb.shopping_cart/FindCart"
	ShoppingCart_GetCarts_FullMethodName   = "/pb.shopping_cart/GetCarts"
)

// ShoppingCartClient is the client API for ShoppingCart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShoppingCartClient interface {
	AddCart(ctx context.Context, in *AddCartReq, opts ...grpc.CallOption) (*AddCartResp, error)
	UpdateCart(ctx context.Context, in *UpdateCartReq, opts ...grpc.CallOption) (*UpdateCartResp, error)
	FindCart(ctx context.Context, in *FindCartReq, opts ...grpc.CallOption) (*FindCartResp, error)
	GetCarts(ctx context.Context, in *FindCartsReq, opts ...grpc.CallOption) (*FindCartsResp, error)
}

type shoppingCartClient struct {
	cc grpc.ClientConnInterface
}

func NewShoppingCartClient(cc grpc.ClientConnInterface) ShoppingCartClient {
	return &shoppingCartClient{cc}
}

func (c *shoppingCartClient) AddCart(ctx context.Context, in *AddCartReq, opts ...grpc.CallOption) (*AddCartResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCartResp)
	err := c.cc.Invoke(ctx, ShoppingCart_AddCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingCartClient) UpdateCart(ctx context.Context, in *UpdateCartReq, opts ...grpc.CallOption) (*UpdateCartResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCartResp)
	err := c.cc.Invoke(ctx, ShoppingCart_UpdateCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingCartClient) FindCart(ctx context.Context, in *FindCartReq, opts ...grpc.CallOption) (*FindCartResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindCartResp)
	err := c.cc.Invoke(ctx, ShoppingCart_FindCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingCartClient) GetCarts(ctx context.Context, in *FindCartsReq, opts ...grpc.CallOption) (*FindCartsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindCartsResp)
	err := c.cc.Invoke(ctx, ShoppingCart_GetCarts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShoppingCartServer is the server API for ShoppingCart service.
// All implementations must embed UnimplementedShoppingCartServer
// for forward compatibility.
type ShoppingCartServer interface {
	AddCart(context.Context, *AddCartReq) (*AddCartResp, error)
	UpdateCart(context.Context, *UpdateCartReq) (*UpdateCartResp, error)
	FindCart(context.Context, *FindCartReq) (*FindCartResp, error)
	GetCarts(context.Context, *FindCartsReq) (*FindCartsResp, error)
	mustEmbedUnimplementedShoppingCartServer()
}

// UnimplementedShoppingCartServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShoppingCartServer struct{}

func (UnimplementedShoppingCartServer) AddCart(context.Context, *AddCartReq) (*AddCartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCart not implemented")
}
func (UnimplementedShoppingCartServer) UpdateCart(context.Context, *UpdateCartReq) (*UpdateCartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCart not implemented")
}
func (UnimplementedShoppingCartServer) FindCart(context.Context, *FindCartReq) (*FindCartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCart not implemented")
}
func (UnimplementedShoppingCartServer) GetCarts(context.Context, *FindCartsReq) (*FindCartsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarts not implemented")
}
func (UnimplementedShoppingCartServer) mustEmbedUnimplementedShoppingCartServer() {}
func (UnimplementedShoppingCartServer) testEmbeddedByValue()                      {}

// UnsafeShoppingCartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShoppingCartServer will
// result in compilation errors.
type UnsafeShoppingCartServer interface {
	mustEmbedUnimplementedShoppingCartServer()
}

func RegisterShoppingCartServer(s grpc.ServiceRegistrar, srv ShoppingCartServer) {
	// If the following call pancis, it indicates UnimplementedShoppingCartServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShoppingCart_ServiceDesc, srv)
}

func _ShoppingCart_AddCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingCartServer).AddCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingCart_AddCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingCartServer).AddCart(ctx, req.(*AddCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingCart_UpdateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingCartServer).UpdateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingCart_UpdateCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingCartServer).UpdateCart(ctx, req.(*UpdateCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingCart_FindCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingCartServer).FindCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingCart_FindCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingCartServer).FindCart(ctx, req.(*FindCartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingCart_GetCarts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCartsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingCartServer).GetCarts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingCart_GetCarts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingCartServer).GetCarts(ctx, req.(*FindCartsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ShoppingCart_ServiceDesc is the grpc.ServiceDesc for ShoppingCart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShoppingCart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.shopping_cart",
	HandlerType: (*ShoppingCartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCart",
			Handler:    _ShoppingCart_AddCart_Handler,
		},
		{
			MethodName: "UpdateCart",
			Handler:    _ShoppingCart_UpdateCart_Handler,
		},
		{
			MethodName: "FindCart",
			Handler:    _ShoppingCart_FindCart_Handler,
		},
		{
			MethodName: "GetCarts",
			Handler:    _ShoppingCart_GetCarts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart.proto",
}
